"""Setup script to scaffold Soulvan media, studio, and video services.

Run this script once from the repository root to create the requested
directory trees and populate them with starter code.
"""

import os
from pathlib import Path


ROOT = Path(os.path.abspath(__file__)).parent


FILES = {
    # -------------------------- soulvan-media --------------------------
    "soulvan-media/README.md": """# Soulvan Media Service\n\nBackend service for generating AI images/videos and minting Soulvan NFTs.\n\n## Quick start\n\n```bash\ncd soulvan-media\npython -m venv .venv && source .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\n\nuvicorn api.main:app --reload\n```\n\nSee `Dockerfile` for container usage.\n""",
    "soulvan-media/requirements.txt": """fastapi\nuvicorn[standard]\ndiffusers\ntorch\nrequests\n""",
    "soulvan-media/Dockerfile": """FROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --upgrade pip && \n    pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n""",
    "soulvan-media/core/mint_nft.py": """\"\"\"Soulvan NFT minting helper.\"\"\"\n\nfrom __future__ import annotations\n\nimport subprocess\nfrom pathlib import Path\n\n\ndef mint_nft(media_path: str | Path, wallet_address: str) -> str:\n    \"\"\"Mint an NFT for the given media file using the Soulvan CLI.\"\"\"\n\n    media_path = Path(media_path).expanduser().resolve()\n    cmd = [\"soulvan-cli\", \"mint\", \"--file\", str(media_path), \"--to\", wallet_address]\n    result = subprocess.run(cmd, capture_output=True, text=True, check=False)\n\n    if result.returncode != 0:\n        raise RuntimeError(\n            f\"Soulvan mint command failed (code {result.returncode}):\\n{result.stderr}\"\n        )\n\n    return result.stdout.strip()\n""",
    "soulvan-media/media/generate_image.py": """from diffusers import StableDiffusionPipeline\nimport torch\n\n\nMODEL_ID = \"stabilityai/stable-diffusion-xl-base-1.0\"\n\n\ndef generate_image(prompt: str, output_path: str) -> str:\n    pipe = StableDiffusionPipeline.from_pretrained(MODEL_ID, torch_dtype=torch.float16)\n    pipe.to(\"cuda\")\n    image = pipe(prompt).images[0]\n    image.save(output_path)\n    return output_path\n""",
    "soulvan-media/media/generate_video.py": """from __future__ import annotations\n\nfrom pathlib import Path\n\n\ndef generate_video(prompt: str, output_path: str) -> str:\n    \"\"\"Placeholder for ModelScope or Sora integration.\"\"\"\n\n    Path(output_path).write_text(f\"Video generated from prompt: {prompt}\")\n    return output_path\n""",
    "soulvan-media/wallet/wallet_utils.py": """from __future__ import annotations\n\n\ndef get_wallet_balance(address: str) -> dict[str, str]:\n    # Placeholder for Soulvancoin RPC integration.\n    return {\"address\": address, \"balance\": \"1000 SVC\"}\n""",
    "soulvan-media/utils/config.py": """\"\"\"Configuration loader for Soulvan media services.\"\"\"\n\nfrom __future__ import annotations\n\nfrom functools import lru_cache\n\nfrom pydantic import BaseSettings, Field\n\n\nclass Settings(BaseSettings):\n    soulvan_rpc_url: str = Field(..., env=\"SOULVAN_RPC_URL\")\n    soulvan_rpc_user: str = Field(..., env=\"SOULVAN_RPC_USER\")\n    soulvan_rpc_pass: str = Field(..., env=\"SOULVAN_RPC_PASS\")\n    media_output_dir: str = Field(default=\"/app/assets\", env=\"MEDIA_OUTPUT_DIR\")\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n\n\n@lru_cache(1)\ndef get_settings() -> Settings:\n    return Settings()\n""",
    "soulvan-media/api/main.py": """from __future__ import annotations\n\nfrom pathlib import Path\n\nfrom fastapi import FastAPI, HTTPException\n\nfrom soulvan-media.core.mint_nft import mint_nft\nfrom soulvan-media.media.generate_image import generate_image\nfrom soulvan-media.media.generate_video import generate_video\nfrom soulvan-media.wallet.wallet_utils import get_wallet_balance\n\n\napp = FastAPI(title=\"Soulvan Media Service\")\n\n\n@app.post(\"/generate/image\")\nasync def generate_image_endpoint(prompt: str) -> dict[str, str]:\n    output_path = Path(\"assets\") / \"latest_image.png\"\n    try:\n        result = generate_image(prompt, str(output_path))\n    except Exception as exc:\n        raise HTTPException(status_code=500, detail=str(exc)) from exc\n    return {\"image_path\": result}\n\n\n@app.post(\"/generate/video\")\nasync def generate_video_endpoint(prompt: str) -> dict[str, str]:\n    output_path = Path(\"assets\") / \"latest_video.mp4\"\n    try:\n        result = generate_video(prompt, str(output_path))\n    except Exception as exc:\n        raise HTTPException(status_code=500, detail=str(exc)) from exc\n    return {\"video_path\": result}\n\n\n@app.post(\"/mint\")\nasync def mint_endpoint(wallet: str, media_path: str) -> dict[str, str]:\n    try:\n        tx = mint_nft(media_path, wallet)\n    except Exception as exc:\n        raise HTTPException(status_code=500, detail=str(exc)) from exc\n    return {\"transaction\": tx}\n\n\n@app.get(\"/wallet/{address}\")\nasync def wallet_balance(address: str) -> dict[str, str]:\n    return get_wallet_balance(address)\n""",
    "soulvan-media/docker-compose.yml": """version: \"3.9\"\n\nservices:\n  soulvan-media:\n    build: .\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./assets:/app/assets\n    environment:\n      - SOULVAN_RPC_URL=http://soulvan-node:8332\n      - SOULVAN_RPC_USER=${SOULVAN_RPC_USER}\n      - SOULVAN_RPC_PASS=${SOULVAN_RPC_PASS}\n  soulvan-node:\n    image: soulvancoin/soulvan-node:latest\n    ports:\n      - \"8332:8332\"\n      - \"8333:8333\"\n    environment:\n      - RPCUSER=${SOULVAN_RPC_USER}\n      - RPCPASS=${SOULVAN_RPC_PASS}\n""",
    # -------------------------- soulvan-studio -------------------------
    "soulvan-studio/README.md": """# Soulvan Studio Frontend\n\nReact/TypeScript frontend for interacting with the Soulvan media backend.\n\n## Development\n\n```bash\ncd soulvan-studio\nnpm install\nnpm run dev\n```\n""",
    "soulvan-studio/package.json": """{\n  \"name\": \"soulvan-studio\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.0\",\n    \"@types/react-dom\": \"^18.2.0\",\n    \"typescript\": \"^5.3.0\",\n    \"vite\": \"^5.0.0\"\n  }\n}\n""",
    "soulvan-studio/src/api/client.ts": """export async function generateImage(prompt: string) {\n  const res = await fetch(\"/generate\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ prompt }),\n  });\n  if (!res.ok) {\n    throw new Error(await res.text());\n  }\n  return res.json();\n}\n""",
    "soulvan-studio/src/App.tsx": """import { useState } from \"react\";\nimport { generateImage } from \"./api/client\";\n\nfunction App() {\n  const [prompt, setPrompt] = useState(\"\");\n  const [imagePath, setImagePath] = useState<string | null>(null);\n\n  const handleGenerate = async () => {\n    const result = await generateImage(prompt);\n    setImagePath(result.image_path);\n  };\n\n  return (\n    <div>\n      <h1>Soulvan Studio</h1>\n      <input value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n      <button onClick={handleGenerate}>Generate</button>\n      {imagePath && <p>Generated: {imagePath}</p>}\n    </div>\n  );\n}\n\nexport default App;\n""",
    # -------------------------- soulvan-video -------------------------
    "soulvan-video/README.md": """# Soulvan Video Service\n\nContainer-friendly service that renders AI videos and mints Soulvan NFTs.\n""",
    "soulvan-video/requirements.txt": """fastapi\nuvicorn[standard]\nrequests\n""",
    "soulvan-video/Dockerfile": """FROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --upgrade pip && pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n""",
    "soulvan-video/models/gen3_wrapper.py": """import requests\n\n\nAPI_URL = \"https://api.runwayml.com/gen3/video\"\n\n\ndef generate_video(prompt: str, output_path: str, *, api_key: str) -> str:\n    payload = {\"prompt\": prompt, \"resolution\": \"4K\"}\n    headers = {\"Authorization\": f\"Bearer {api_key}\"}\n\n    response = requests.post(API_URL, json=payload, headers=headers, timeout=120)\n    response.raise_for_status()\n    video_url = response.json().get(\"video_url\")\n    if not video_url:\n        raise RuntimeError(\"Video generation API did not return a video URL\")\n\n    video_data = requests.get(video_url, timeout=120).content\n    with open(output_path, \"wb\") as fh:\n        fh.write(video_data)\n    return output_path\n""",
    "soulvan-video/blockchain/mint_nft.py": """import subprocess\nfrom pathlib import Path\n\n\ndef mint_nft(file_path: str | Path, wallet_address: str) -> str:\n    cmd = [\"soulvan-cli\", \"mint\", \"--file\", str(Path(file_path)), \"--to\", wallet_address]\n    result = subprocess.run(cmd, capture_output=True, text=True, check=False)\n    if result.returncode != 0:\n        raise RuntimeError(result.stderr)\n    return result.stdout.strip()\n""",
    "soulvan-video/pipeline/render_pipeline.py": """from models.gen3_wrapper import generate_video\nfrom blockchain.mint_nft import mint_nft\n\n\ndef render_and_mint(prompt: str, wallet: str, *, api_key: str) -> dict[str, str]:\n    safe_name = prompt.replace(\" \", \"_\")\n    video_path = f\"assets/{safe_name}.mp4\"\n    generate_video(prompt, video_path, api_key=api_key)\n    mint_result = mint_nft(video_path, wallet)\n    return {\"video\": video_path, \"mint\": mint_result}\n""",
    "soulvan-video/api/main.py": """from fastapi import FastAPI, HTTPException\nfrom pipeline.render_pipeline import render_and_mint\n\napp = FastAPI(title=\"Soulvan Video Service\")\n\n\n@app.post(\"/video\")\ndef generate(prompt: str, wallet: str, api_key: str):\n    try:\n        result = render_and_mint(prompt, wallet, api_key=api_key)\n    except Exception as exc:\n        raise HTTPException(status_code=500, detail=str(exc)) from exc\n    return result\n""",
    # -------------------------- soulvancoin ---------------------------
    "soulvancoin/README.md": """# Soulvancoin
\n+A lightweight reference implementation of the Soulvancoin blockchain,\n+including custom SHA-256 proof-of-work, wallet utilities, mining CLI, and\n+placeholders for media/AI integrations.\n+\n+## Layout\n+\n+- `core/` &mdash; blockchain data structures and proof-of-work engine.\n+- `wallet/` &mdash; key generation helpers and wallet orchestration.\n+- `miner/` &mdash; interactive mining loop.\n+- `media/` &mdash; hooks into cinematic AI identity generation.\n+- `ui/` &mdash; Flask dashboard stub.\n+- `tests/` &mdash; unit tests for the blockchain.\n+- `soulvancoin.py` &mdash; entry point that wires the components together.\n+\n+## Quick start\n+\n+```bash\n+python -m venv .venv && source .venv/bin/activate\n+pip install -r requirements.txt\n+python soulvancoin.py\n+```\n+\n+Run tests with `pytest`.\n+""",
    "soulvancoin/LICENSE": """MIT License\n+\n+Copyright (c) 2025 Soulvancoin\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+""",
    "soulvancoin/requirements.txt": """ecdsa\n+flask\n+pytest\n+""",
    "soulvancoin/core/blockchain.py": """\"\"\"Soulvancoin blockchain and custom SHA-256 proof-of-work implementation.\"\"\"\n+\n+from __future__ import annotations\n+\n+import json\n+import time\n+from dataclasses import dataclass, field\n+from hashlib import sha256\n+from typing import List\n+\n+\n+def hash_payload(payload: dict) -> str:\n+    \"\"\"Generate a SHA-256 hash for a JSON-serializable payload.\"\"\"\n+\n+    block_string = json.dumps(payload, sort_keys=True, separators=(\",\", \":\"))\n+    return sha256(block_string.encode(\"utf-8\")).hexdigest()\n+\n+\n+@dataclass\n+class Block:\n+    index: int\n+    timestamp: float\n+    data: str\n+    previous_hash: str\n+    nonce: int = 0\n+    hash: str = field(init=False)\n+\n+    def __post_init__(self) -> None:\n+        self.hash = self.compute_hash()\n+\n+    def compute_hash(self) -> str:\n+        payload = {\n+            \"index\": self.index,\n+            \"timestamp\": self.timestamp,\n+            \"data\": self.data,\n+            \"previous_hash\": self.previous_hash,\n+            \"nonce\": self.nonce,\n+        }\n+        return hash_payload(payload)\n+\n+\n+class Soulvancoin:\n+    difficulty: int = 4\n+\n+    def __init__(self) -> None:\n+        self.chain: List[Block] = []\n+        self.create_genesis_block()\n+\n+    def create_genesis_block(self) -> None:\n+        genesis = Block(index=0, timestamp=time.time(), data=\"Genesis Block\", previous_hash=\"0\")\n+        self.chain.append(genesis)\n+\n+    def get_last_block(self) -> Block:\n+        return self.chain[-1]\n+\n+    def add_block(self, data: str) -> Block:\n+        last_block = self.get_last_block()\n+        new_block = Block(\n+            index=last_block.index + 1,\n+            timestamp=time.time(),\n+            data=data,\n+            previous_hash=last_block.hash,\n+        )\n+        mined_block = self.proof_of_work(new_block)\n+        self.chain.append(mined_block)\n+        return mined_block\n+\n+    def proof_of_work(self, block: Block) -> Block:\n+        prefix = \"0\" * self.difficulty\n+        while not block.hash.startswith(prefix):\n+            block.nonce += 1\n+            block.hash = block.compute_hash()\n+        return block\n+\n+    def is_chain_valid(self) -> bool:\n+        for index in range(1, len(self.chain)):\n+            previous_block = self.chain[index - 1]\n+            current_block = self.chain[index]\n+\n+            if current_block.hash != current_block.compute_hash():\n+                return False\n+            if current_block.previous_hash != previous_block.hash:\n+                return False\n+        return True\n+""",
    "soulvancoin/wallet/keys.py": """\"\"\"Elliptic curve key utilities for Soulvancoin wallets.\"\"\"\n+\n+from __future__ import annotations\n+\n+import os\n+from hashlib import new as hashlib_new, sha256\n+\n+import ecdsa\n+\n+\n+CURVE = ecdsa.SECP256k1\n+\n+\n+def generate_private_key() -> bytes:\n+    return os.urandom(32)\n+\n+\n+def generate_public_key(private_key: bytes) -> bytes:\n+    signing_key = ecdsa.SigningKey.from_string(private_key, curve=CURVE)\n+    verifying_key = signing_key.verifying_key\n+    return verifying_key.to_string()\n+\n+\n+def generate_address(public_key: bytes) -> str:\n+    sha = sha256(public_key).digest()\n+    ripemd = hashlib_new(\"ripemd160\", sha).digest()\n+    return ripemd.hex()\n+""",
    "soulvancoin/wallet/wallet.py": """\"\"\"Wallet orchestration utilities.\"\"\"\n+\n+from __future__ import annotations\n+\n+from wallet.keys import generate_address, generate_private_key, generate_public_key\n+\n+
def create_wallet() -> dict[str, str]:\n+    private_key = generate_private_key()\n+    public_key = generate_public_key(private_key)\n+    address = generate_address(public_key)\n+    return {\"private_key\": private_key.hex(), \"public_key\": public_key.hex(), \"address\": address}\n+""",
    "soulvancoin/miner/miner.py": """\"\"\"Interactive mining loop for Soulvancoin.\"\"\"\n+\n+from __future__ import annotations\n+\n+from core.blockchain import Soulvancoin\n+

def run_miner() -> None:\n+    chain = Soulvancoin()\n+    print(\"Soulvancoin miner started. Press Ctrl+C to exit.\")\n+    try:\n+        while True:\n+            data = input(\"Enter transaction data: \")\n+            block = chain.add_block(data)\n+            print(f\"Block mined: {block.hash}\")\n+    except KeyboardInterrupt:\n+        print(\"\nShutting down miner.\")\n+

if __name__ == \"__main__\":\n+    run_miner()\n+""",
    "soulvancoin/media/generator.py": """\"\"\"AI-powered branding hook placeholders.\"\"\"\n+\n+from __future__ import annotations\n+\n+
def generate_cinematic_identity(address: str) -> None:\n+    print(f\"[Soulvancoin AI] Generating cinematic identity for {address}\")\n+    # Integrate Stable Diffusion / video pipeline here.\n+""",
    "soulvancoin/ui/dashboard.py": """\"\"\"Flask dashboard stub for Soulvancoin wallets.\"\"\"\n+\n+from flask import Flask, render_template_string\n+\n+from media.generator import generate_cinematic_identity\n+from wallet.wallet import create_wallet\n+\n+
app = Flask(__name__)\n+

@app.route(\"/\")\n+def home():\n+    return render_template_string(\"<h1>Welcome to Soulvancoin</h1>\")\n+

@app.route(\"/wallet\")\n+def wallet():\n+    wallet = create_wallet()\n+    generate_cinematic_identity(wallet[\"address\"])\n+    return render_template_string(\n+        \"<p>Your Soulvancoin address: {{ address }}</p>\", address=wallet[\"address\"]\n+    )\n+

if __name__ == \"__main__\":\n+    app.run(debug=True)\n+""",
    "soulvancoin/tests/test_chain.py": """from core.blockchain import Soulvancoin\n+

def test_chain_is_valid_after_mining():\n+    chain = Soulvancoin()\n+    chain.add_block(\"Test data\")\n+    assert chain.is_chain_valid()\n+""",
    "soulvancoin/soulvancoin.py": """\"\"\"Soulvancoin entry point.\"\"\"\n+\n+from __future__ import annotations\n+\n+from core.blockchain import Soulvancoin\n+from media.generator import generate_cinematic_identity\n+from miner.miner import run_miner\n+from wallet.wallet import create_wallet\n+

def main() -> None:\n+    wallet = create_wallet()\n+    print(f\"Generated wallet address: {wallet['address']}\")\n+    generate_cinematic_identity(wallet[\"address\"])\n+
    chain = Soulvancoin()\n+    print(\"Initialized Soulvancoin chain with genesis block.\")\n+    block = chain.add_block(\"Initial transaction\")\n+    print(f\"Mined block hash: {block.hash}\")\n+
    print(\"Starting interactive miner...\")\n+    run_miner()\n+

if __name__ == \"__main__\":\n+    main()\n+""",
}


def main() -> None:
    for relative_path, content in FILES.items():
        file_path = ROOT / relative_path
        file_path.parent.mkdir(parents=True, exist_ok=True)
        file_path.write_text(content, encoding="utf-8")
    print("Scaffolding complete.")


if __name__ == "__main__":
    main()